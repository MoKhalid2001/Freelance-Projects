
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
    
public class ViewBookingsForm extends javax.swing.JFrame {
    private Connection connection;
    private int customerId;  // Store the customer ID
    private DefaultTableModel model;
    
    /**
     * Creates new form ViewBookingsForm
     */
    public ViewBookingsForm(Connection connection, int customerId) {
        this.connection = connection;
        this.customerId = customerId;
        initComponents();
        // Set up table model
        model = new DefaultTableModel(new Object[]{"Make", "Model", "Price (Per Day)", "Total Price"}, 0);
        bookingsTable.setModel(model);
        loadBookings();  // Load the current bookings for the customer        
    }
    
    // Method to load the current bookings of the customer
    private void loadBookings() {
        // Step 1: Retrieve the total price from the customers table
    double totalPrice = 0.0;
    String totalPriceQuery = "SELECT total_price FROM customers WHERE id = ?";
    try (PreparedStatement stmt = connection.prepareStatement(totalPriceQuery)) {
        stmt.setInt(1, customerId);
        ResultSet rs = stmt.executeQuery();
        if (rs.next()) {
            totalPrice = rs.getDouble("total_price");  // Assign total_price from customers table
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error retrieving total price from customer record.", "Database Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Step 2: Load the current bookings of the customer from the cars table
    String bookingsQuery = "SELECT make, model, price FROM cars WHERE booked_by = ?";
    try (PreparedStatement stmt = connection.prepareStatement(bookingsQuery)) {
        stmt.setInt(1, customerId);
        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            String make = rs.getString("make");
            String modelStr = rs.getString("model");
            double price = rs.getDouble("price");

            // Display individual booking price and cumulative totalPrice for all bookings
            model.addRow(new Object[]{make, modelStr, price, totalPrice});
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error loading bookings for the customer.", "Database Error", JOptionPane.ERROR_MESSAGE);
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        bookingsTable = new javax.swing.JTable();
        returnCar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        bookingsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(bookingsTable);

        returnCar.setFont(new java.awt.Font("Segoe UI Light", 1, 14)); // NOI18N
        returnCar.setText("Return Car");
        returnCar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnCarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(131, 131, 131)
                .addComponent(returnCar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(returnCar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void returnCarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnCarActionPerformed
        // TODO add your handling code here:
        int selectedRow = bookingsTable.getSelectedRow();  // Get the selected row
    if (selectedRow != -1) {
        int carId = (int) model.getValueAt(selectedRow, 0);  // Car ID from the table
        double bookingPrice = (Double) model.getValueAt(selectedRow, 3);  // Price per day * days (or simply total price for the booking)

        // Step 1: Update the car's availability by incrementing the available count and setting booked_by to NULL
        String updateCarQuery = "UPDATE cars SET available = available + 1, booked_by = NULL WHERE id = ?";
        try (PreparedStatement updateStmt = connection.prepareStatement(updateCarQuery)) {
            updateStmt.setInt(1, carId);
            updateStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating car availability.", "Database Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Step 2: Decrement the customer's total price in the customers table
        String updateCustomerQuery = "UPDATE customers SET total_price = total_price - ? WHERE id = ?";
        try (PreparedStatement updateStmt = connection.prepareStatement(updateCustomerQuery)) {
            updateStmt.setDouble(1, bookingPrice);  // Decrease the total price by the booking's total price
            updateStmt.setInt(2, customerId);
            updateStmt.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error updating customer total price.", "Database Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Step 3: Remove the returned car from the table
        model.removeRow(selectedRow);

        JOptionPane.showMessageDialog(this, "Car returned successfully!");
    } else {
        JOptionPane.showMessageDialog(this, "Please select a car to return.");
    }      
    }//GEN-LAST:event_returnCarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewBookingsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewBookingsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewBookingsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewBookingsForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               // new ViewBookingsForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable bookingsTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton returnCar;
    // End of variables declaration//GEN-END:variables
}
